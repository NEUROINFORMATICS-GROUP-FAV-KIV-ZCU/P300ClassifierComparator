% Train stacked autoencoder with both unsupervised pre-training
% and supervised fine-tuning
function  [deepnet, train_time] = trainsae2(out_features, out_targets, param)

    saet = tic;
    
     % Train the first autoencoder (unsupervised)
    hiddenSize1 = param.sae.neurons_1;
    autoenc1 = trainAutoencoder(out_features, hiddenSize1, ...
    'MaxEpochs', param.sae.iters_1,...
    'L2WeightRegularization', param.sae.l2reg, ...
    'SparsityRegularization', param.sae.sparreg, ...
    'SparsityProportion', param.sae.sparprop, ...
    'DecoderTransferFunction', param.sae.TransferFunction, ...
    'ScaleData', true, ...
    'ShowProgressWindow', param.showTraining);
    feat1 = encode(autoenc1, out_features); % encode the feature vectors
                                            % into hiddenSize1
                                            % dimensionality
    
    % Train the second autoencoder (unsupervised)
    hiddenSize2 = param.sae.neurons_2;
    autoenc2 = trainAutoencoder(feat1, hiddenSize2, ...
    'MaxEpochs',param.sae.iters_2, ...
    'L2WeightRegularization',param.sae.l2reg, ...
    'SparsityRegularization',param.sae.sparreg, ...
    'SparsityProportion',param.sae.sparprop, ...
    'DecoderTransferFunction', param.sae.TransferFunction, ...
    'ScaleData', false, ...
    'ShowProgressWindow', param.showTraining);
    feat2 = encode(autoenc2, feat1);
    
    % Train the third autoencoder (unsupervised)
    hiddenSize3 = param.sae.neurons_3;
    autoenc3 = trainAutoencoder(feat2, hiddenSize3, ...
    'MaxEpochs',param.sae.iters_3, ...
    'L2WeightRegularization',param.sae.l2reg, ...
    'SparsityRegularization',param.sae.sparreg, ...
    'SparsityProportion',param.sae.sparprop, ...
    'DecoderTransferFunction', param.sae.TransferFunction, ...
    'ScaleData', false, ...
    'ShowProgressWindow', param.showTraining);
    feat3 = encode(autoenc3,feat2);
    
      
    % Train the last - softmax supervised layer
    softnet = trainSoftmaxLayer(feat3, out_targets, 'MaxEpochs', param.sae.iters_softmax, 'ShowProgressWindow', param.showTraining, 'LossFunction','crossentropy');
    deepnet = stack(autoenc1, autoenc2, autoenc3, softnet);
    
    % Final finetuning 
    deepnet.trainParam.epochs = param.sae.finetuneIter;
    deepnet.layers{1}.transferFcn = param.sae.TransferFunction;
    deepnet.layers{2}.transferFcn = param.sae.TransferFunction;
    deepnet.layers{1}.transferFcn = param.sae.TransferFunction;
    deepnet.performFcn = param.sae.performFcn;
    [deepnet] = train(deepnet,out_features, out_targets);
    train_time = toc(saet);
  %  view(deepnet);
end